defmodule Serum.Project.ElixirValidatorTest do
  @moduledoc """
  Tests for `Serum.Project.ElixirValidator`

  The purpose of this module is to check whether the input (an Elixir term
  generated by evaluating `serum.exs`) is a valid Serum project configuration.

  An Elixir term `t` is a valid Serum project configuration if all of the
  conditions below is true:

  - `t` is a map.
  - `t` contains all the required keys.
  - `t` does not contain any undefined key, which is neither of the required
    keys nor the optional keys.
  - Any value associated with a key in `t` does not violate the constraints
    specific to that key.
  """

  use Serum.Case, async: true
  import Serum.Project.ElixirValidator
  alias Serum.V2.Error

  @base_map %{
    site_name: "Test Site",
    site_description: "This is a test site.",
    author: "John Doe",
    author_email: "john.doe@example.com",
    base_url: "/"
  }

  describe "validate/1" do
    test "validates the given map with required keys" do
      assert {:ok, _} = validate(@base_map)
    end

    test "validates the given map with required keys and optional keys" do
      map =
        Map.merge(@base_map, %{
          server_root: "https://example.com/test",
          date_format: "{WDfull}, {D} {Mshort} {YYYY}",
          list_title_all: "All posts",
          list_title_tag: "Posts about ~s",
          pagination: true,
          posts_per_page: 10,
          preview_length: 200,
          plugins: [Serum.TestPlugin1, Serum.TestPlugin2],
          theme: Serum.TestTheme
        })

      assert {:ok, _} = validate(map)
    end

    test "fails when the given value is not a map" do
      assert {:error, %Error{}} = validate(:foo)
    end

    test "fails when a required key is missing" do
      map = Map.delete(@base_map, :base_url)
      {:error, %Error{} = error} = validate(map)
      msg = to_string(error)

      assert msg =~ "missing"
      assert msg =~ "property"
    end

    test "fails when multiple required keys are missing" do
      map = Map.drop(@base_map, [:base_url, :site_description])
      {:error, %Error{} = error} = validate(map)
      msg = to_string(error)

      assert msg =~ "missing"
      assert msg =~ "properties"
    end

    test "fails when there is an undefined key" do
      map = Map.put(@base_map, :foo, :bar)
      {:error, %Error{} = error} = validate(map)
      msg = to_string(error)

      assert msg =~ "unknown"
      assert msg =~ "property"
    end

    test "fails when there are multiple undefined keys" do
      map =
        @base_map
        |> Map.put(:foo, :bar)
        |> Map.put(:lorem, "ipsum")

      {:error, %Error{} = error} = validate(map)
      msg = to_string(error)

      assert msg =~ "unknown"
      assert msg =~ "properties"
    end

    test "fails when a value violates the constraint" do
      map = Map.put(@base_map, :base_url, "hello")
      {:error, %Error{caused_by: errors}} = validate(map)

      assert length(errors) == 1
    end

    test "fails when multiple values violate corresponding constraints" do
      map =
        Map.merge(@base_map, %{
          base_url: "hello",
          server_root: "htttps://foo.bar/baz",
          date_format: 3,
          posts_per_page: 0,
          preview_length: -1,
          theme: "Serum.TestTheme"
        })

      {:error, %Error{caused_by: errors}} = validate(map)

      assert length(errors) == 6
    end
  end
end
